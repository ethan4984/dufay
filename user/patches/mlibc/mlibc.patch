diff --git a/ports/mlibc-orig/meson.build b/ports/mlibc-workdir/meson.build
index b781895..8ebcb71 100644
--- a/ports/mlibc-orig/meson.build
+++ b/ports/mlibc-workdir/meson.build
@@ -44,7 +44,7 @@ if not headers_only
 	c_compiler = meson.get_compiler('c')
 
 	add_project_arguments('-nostdinc', '-fno-builtin', language: ['c', 'cpp'])
-	add_project_arguments('-std=c++17', language: 'cpp')
+	add_project_arguments('-std=gnu++17', language: 'cpp')
 	add_project_arguments('-fno-rtti', '-fno-exceptions', language: 'cpp')
 	add_project_link_arguments('-nostdlib', language: ['c', 'cpp'])
 
@@ -89,6 +89,10 @@ elif host_machine.system() == 'qword'
 	rtdl_include_dirs += include_directories('sysdeps/qword/include')
 	libc_include_dirs += include_directories('sysdeps/qword/include')
 	subdir('sysdeps/qword')
+elif host_machine.system() == 'rock'
+	rtdl_include_dirs += include_directories('sysdeps/rock/include')
+	libc_include_dirs += include_directories('sysdeps/rock/include')
+	subdir('sysdeps/rock')
 elif host_machine.system() == 'sigma'
 	#disable_linux_option = true
 	rtdl_include_dirs += include_directories('sysdeps/sigma/include')
diff --git a/ports/mlibc-workdir/sysdeps/rock/crt-x86_64/crt0.S b/ports/mlibc-workdir/sysdeps/rock/crt-x86_64/crt0.S
new file mode 100644
index 0000000..0a0a4a0
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/crt-x86_64/crt0.S
@@ -0,0 +1,7 @@
+
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
diff --git a/ports/mlibc-workdir/sysdeps/rock/generic/entry.cpp b/ports/mlibc-workdir/sysdeps/rock/generic/entry.cpp
new file mode 100644
index 0000000..ee7a794
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/generic/entry.cpp
@@ -0,0 +1,34 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
+
diff --git a/ports/mlibc-workdir/sysdeps/rock/generic/generic.cpp b/ports/mlibc-workdir/sysdeps/rock/generic/generic.cpp
new file mode 100644
index 0000000..ddc5004
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/generic/generic.cpp
@@ -0,0 +1,422 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <limits.h>
+
+#define STUB_ONLY { __ensure(!"STUB_ONLY function was called"); __builtin_unreachable(); }
+
+#define SYSCALL0(NUM) ({                     \
+    asm volatile ("syscall"                  \
+                  : "=a"(ret), "=d"(errno)   \
+                  : "a"(NUM)                 \
+                  : "rcx", "r11", "memory"); \
+})
+
+#define SYSCALL1(NUM, ARG0) ({               \
+    asm volatile ("syscall"                  \
+                  : "=a"(ret), "=d"(errno)   \
+                  : "a"(NUM), "D"(ARG0)      \
+                  : "rcx", "r11", "memory"); \
+})
+
+#define SYSCALL2(NUM, ARG0, ARG1) ({               \
+    asm volatile ("syscall"                        \
+                  : "=a"(ret), "=d"(errno)         \
+                  : "a"(NUM), "D"(ARG0), "S"(ARG1) \
+                  : "rcx", "r11", "memory");       \
+})
+
+#define SYSCALL3(NUM, ARG0, ARG1, ARG2) ({                    \
+    asm volatile ("syscall"                                   \
+                  : "=a"(ret), "=d"(errno)                    \
+                  : "a"(NUM), "D"(ARG0), "S"(ARG1), "d"(ARG2) \
+                  : "rcx", "r11", "memory");                  \
+})
+
+#define SYSCALL4(NUM, ARG0, ARG1, ARG2, ARG3) ({               \
+    register typeof(ARG3) arg3 asm("r10") = ARG3;              \
+    asm volatile ("syscall"                                    \
+                  : "=a"(ret), "=d"(errno)                     \
+                  : "a"(NUM), "D"(ARG0), "S"(ARG1), "d"(ARG2), \
+                    "r"(arg3)                                  \
+                  : "rcx", "r11", "memory");                   \
+})
+
+#define SYSCALL6(NUM, ARG0, ARG1, ARG2, ARG3, ARG4, ARG5) ({   \
+    register typeof(ARG3) arg3 asm("r10") = ARG3;              \
+    register typeof(ARG4) arg4 asm("r8")  = ARG4;              \
+    register typeof(ARG5) arg5 asm("r9")  = ARG5;              \
+    asm volatile ("syscall"                                    \
+                  : "=a"(ret), "=d"(errno)                     \
+                  : "a"(NUM), "D"(ARG0), "S"(ARG1), "d"(ARG2), \
+                    "r"(arg3), "r"(arg4), "r"(arg5)            \
+                  : "rcx", "r11", "memory");                   \
+})
+
+#define SYSCALL_OPEN 0
+#define SYSCALL_CLOSE 1
+#define SYSCALL_READ 2
+#define SYSCALL_WRITE 3
+#define SYSCALL_LSEEK 4
+#define SYSCALL_DUP 5
+#define SYSCALL_DUP2 6
+#define SYSCALL_MMAP 7
+#define SYSCALL_MUNMAP 8
+#define SYSCALL_SET_FS_BASE 9
+#define SYSCALL_SET_GS_BASE 10
+#define SYSCALL_GET_FS_BASE 11
+#define SYSCALL_GET_GS_BASE 12
+#define SYSCALL_LOG 13
+#define SYSCALL_EXIT 14
+#define SYSCALL_GETPID 15
+#define SYSCALL_GETTID 16
+#define SYSCALL_GETPPID 17
+#define SYSCALL_ISATTY 18
+#define SYSCALL_FCNTL 19
+#define SYSCALL_FSTAT 20
+#define SYSCALL_FSTATAT 21
+#define SYSCALL_IOCTL 22
+#define SYSCALL_FORK 23
+#define SYSCALL_WAITPID 24
+#define SYSCALL_READDIR 25
+#define SYSCALL_EXECVE 26
+#define SYSCALL_GETCWD 27
+#define SYSCALL_CHDIR 28
+#define SYSCALL_FACCESSAT 29
+
+namespace mlibc {
+
+void sys_libc_log(const char *message) {
+    int ret, errno;
+    SYSCALL1(SYSCALL_LOG, message);
+}
+
+void sys_libc_panic() {
+    sys_libc_log("\nMLIBC PANIC\n");
+    sys_exit(255);
+}
+
+int sys_futex_wait(int *pointer, int expected) STUB_ONLY
+int sys_futex_wake(int *pointer) STUB_ONLY
+
+void sys_exit(int status) {
+    int ret, errno;
+    SYSCALL1(SYSCALL_EXIT, status);
+}
+
+int sys_tcb_set(void *pointer) {
+    int ret, errno;
+    SYSCALL1(SYSCALL_SET_FS_BASE, pointer);
+    return 0;
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags,
+               int fd, off_t offset, void **window) {
+    void *ret;
+    int errno;
+    SYSCALL6(SYSCALL_MMAP, hint, size, prot, flags, fd, offset);
+    if (ret == NULL)
+        return errno;
+    *window = ret;
+    return 0;
+}
+
+int sys_vm_unmap(void *pointer, size_t size) {
+    int ret, errno;
+    SYSCALL2(SYSCALL_MUNMAP, pointer, size);
+    if (ret == -1)
+        return errno;
+    return 0;
+}
+
+int sys_anon_allocate(size_t size, void **pointer) {
+    int errno = sys_vm_map(NULL, size, PROT_EXEC | PROT_READ | PROT_WRITE,
+                           MAP_ANONYMOUS, -1, 0, pointer);
+    return errno;
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+	return 0;
+}
+
+int sys_open(const char *path, int flags, int *fd) {
+    int ret;
+    int errno;
+    SYSCALL2(SYSCALL_OPEN, path, flags);
+    if(ret == -1)
+        return errno;
+    *fd = ret;
+    return 0;
+}
+
+int sys_open_dir(const char *path, int *handle) {
+	return sys_open(path, 0, handle);
+}
+
+
+int sys_close(int fd) {
+    int ret, errno;
+    SYSCALL1(SYSCALL_CLOSE, fd);
+    if (ret == -1)
+        return errno;
+    return 0;
+}
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+    off_t ret;
+    int errno;
+    SYSCALL3(SYSCALL_LSEEK, fd, offset, whence);
+    if (ret == -1)
+        return errno;
+    *new_offset = ret;
+    return 0;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+    ssize_t ret;
+    int errno;
+    SYSCALL3(SYSCALL_READ, fd, buf, count);
+    if (ret == -1)
+        return errno;
+    *bytes_read = ret;
+    return 0;
+}
+
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+    ssize_t ret;
+    int errno;
+    SYSCALL3(SYSCALL_WRITE, fd, buf, count);
+    if (ret == -1)
+        return errno;
+    *bytes_written = ret;
+    return 0;
+}
+
+
+pid_t sys_getpid() {
+    pid_t ret;
+    int errno;
+    SYSCALL0(SYSCALL_GETPID);
+    return ret;
+}
+
+pid_t sys_getppid() {
+    pid_t ret;
+    int errno;
+    SYSCALL0(SYSCALL_GETPPID);
+    return ret;
+}
+
+uid_t sys_getuid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+uid_t sys_geteuid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+gid_t sys_getgid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+gid_t sys_getegid() {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_ttyname(int fd, char *buf, size_t size) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return ENOSYS;
+}
+
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    *secs  = 0;
+    *nanos = 0;
+    return 0;
+}
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+    const char *hostname = "rock";
+    for (size_t i = 0; i < bufsize; i++) {
+        buffer[i] = hostname[i];
+        if (hostname[i] == 0)
+            break;
+    }
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+    return 0;
+}
+
+int sys_dup(int fd, int flags, int *newfd) {
+    int errno, ret;
+    SYSCALL1(SYSCALL_DUP, fd);
+    if (ret == -1)
+        return errno;
+    *newfd = ret;
+    return 0;
+}
+
+int sys_dup2(int fd, int flags, int newfd) {
+    int errno, ret;
+    SYSCALL2(SYSCALL_DUP2, fd, newfd);
+    if (ret == -1)
+        return errno;
+    return 0;
+}
+
+int sys_fcntl(int fd, int request, va_list args, int *result) {
+    int errno, ret;
+    SYSCALL3(SYSCALL_FCNTL, fd, request, va_arg(args, uint64_t));
+    if(ret == -1)
+        return errno;
+    *result = ret;
+    return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+    switch (fsfdt) {
+        case fsfd_target::fd: {
+            int errno, ret;
+            SYSCALL2(SYSCALL_FSTAT, fd, statbuf);
+            if (ret == -1)
+                return errno;
+            break;
+        }
+        case fsfd_target::path: {
+            int errno, ret;
+            SYSCALL4(SYSCALL_FSTATAT, AT_FDCWD, path, statbuf, flags);
+            if (ret == -1)
+                return errno;
+            break;
+        }
+        case fsfd_target::fd_path: {
+            int errno, ret;
+            SYSCALL4(SYSCALL_FSTATAT, fd, path, statbuf, flags);
+            if (ret == -1)
+                return errno;
+            break;
+        }
+        default: {
+            __ensure(!"stat: Invalid fsfdt");
+            __builtin_unreachable();
+            return -1;
+        }
+    }
+    return 0;
+}
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set, sigset_t *__restrict retrieve) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+int sys_sigaction(int signum, const struct sigaction *act, struct sigaction *oldact) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0; 
+}
+
+int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set, fd_set *except_set,
+		const struct timespec *timeout, const sigset_t *sigmask, int *num_events) {
+    mlibc::infoLogger() << "mlibc: " << __func__ << " is a stub!\n" << frg::endlog;
+	return 0;
+}
+
+int sys_isatty(int fd) {
+    return 0;
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+    int ret;
+    int errno;
+    SYSCALL3(SYSCALL_IOCTL, fd, request, arg);
+    if (ret == -1)
+        return errno;
+    *result = ret;
+    return 0;
+}
+
+int sys_fork(pid_t *child) {
+    pid_t ret;
+    int errno;
+    SYSCALL0(SYSCALL_FORK);
+    if (ret == -1)
+        return errno;
+    *child = ret;
+    return 0;
+}
+
+int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+    int errno, ret;
+    SYSCALL3(SYSCALL_WAITPID, pid, status, flags);
+    if (ret == -1)
+        return errno;
+    *ret_pid = ret;
+    return 0;
+}
+
+int sys_read_entries(int fd, void *buffer, size_t max_size, size_t *bytes_read) {
+    int ret;
+    int errno;
+
+    SYSCALL2(SYSCALL_READDIR, fd, buffer);
+
+    if (ret == -1 && errno == 0) {
+        /* end of dir */
+        *bytes_read = 0;
+        return 0;
+    } else if (ret == -1) {
+        return errno;
+    }
+
+    *bytes_read = sizeof(struct dirent);
+    return 0;
+}
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+    int errno, ret;
+    SYSCALL3(SYSCALL_EXECVE, path, argv, envp);
+    return errno;
+}
+
+int sys_faccessat(int dirfd, const char *pathname, int mode, int flags) {
+    int ret, errno;
+    SYSCALL4(SYSCALL_FACCESSAT, dirfd, pathname, mode, flags);
+
+	if(ret == -1) {
+		return errno;
+	}
+
+	return 0;
+}
+
+int sys_access(const char *path, int mode) {
+	return sys_faccessat(AT_FDCWD, path, mode, 0);
+}
+
+int sys_getcwd(char *buffer, size_t size) {
+	int errno, ret;
+	SYSCALL2(SYSCALL_GETCWD, buffer, size);
+
+	if(ret == 0)
+        return errno;
+
+    return 0;
+}
+
+int sys_chdir(const char *path) {
+    int errno, ret;
+    SYSCALL1(SYSCALL_CHDIR, path);
+
+    if(ret == -1)
+        return errno;
+
+    return 0;
+}
+
+} // namespace mlibc
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/abi.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/abi.h
new file mode 120000
index 0000000..c945860
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/auxv.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/auxv.h
new file mode 120000
index 0000000..b7bb109
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/qword/auxv.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/blkcnt_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..e9d9f1b
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/blksize_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..c6dfb6e
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/dev_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..0c1143b
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/errno.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/errno.h
new file mode 120000
index 0000000..589859f
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/fcntl.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..ea5323a
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/gid_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..6a77218
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/in.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/in.h
new file mode 120000
index 0000000..b58c683
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/ino_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..10d644e
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/mode_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..29d7733
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/nlink_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..7618c27
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/pid_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..3fd26a7
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/reboot.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/reboot.h
new file mode 120000
index 0000000..ecc3ddb
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/resource.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/resource.h
new file mode 120000
index 0000000..3e59c75
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/seek-whence.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..3bd41ef
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/signal.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/signal.h
new file mode 120000
index 0000000..b20e511
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/socket.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/socket.h
new file mode 120000
index 0000000..0e1d6be
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/stat.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/stat.h
new file mode 120000
index 0000000..82642c3
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/termios.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/termios.h
new file mode 120000
index 0000000..cfcfe76
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/time.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/time.h
new file mode 120000
index 0000000..97f3d52
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/uid_t.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..1113eba
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/vm-flags.h b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..f1a985e
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/ports/mlibc-workdir/sysdeps/rock/meson.build b/ports/mlibc-workdir/sysdeps/rock/meson.build
new file mode 100644
index 0000000..0169278
--- /dev/null
+++ b/ports/mlibc-workdir/sysdeps/rock/meson.build
@@ -0,0 +1,49 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp'
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		subdir: 'abi-bits'
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
