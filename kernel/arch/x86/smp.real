org 0
bits 16

cli
cld

jmp 0x8000:init_CS

init_CS:
	mov ax, 0x8000
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov ss, ax
	mov gs, ax

	lgdt [GDT]

	mov eax, [0x1000 + 8]
	mov cr3, eax

	mov eax, cr4

	test dword [0x1000 + 40], (1 << 0)
	jz .no_la57

	or eax, (1 << 12)

.no_la57:
	or eax, (1 << 5)
	mov cr4, eax

	mov ecx, 0xc0000080
	rdmsr
	or eax, (1 << 8) ; set LME 
	wrmsr

	mov eax, 0x80000011
	mov cr0, eax

	mov dword [.farjmp], code64 + 0x80000
	o32 jmp far [.farjmp]

	bits 64

.farjmp:
	.offet: dd 0
	.segment: dd 0x8

code64:
	mov ax, 0x10
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	mov ss, ax

	mov rcx, qword [0x81000 + 32] ; idtr
	lidt [rcx]

	mov rsp, qword [0x81000]
	mov rbx, qword [0x81000 + 16] ; entry point
	mov rdi, qword [0x81000 + 24] ; core local

	jmp rbx

GDT:
	dw .end - .start - 1
	dd .start + 0x80000

.start:

.NULL:
	dq 0
.CODE64:
	dw 0 ; limit
	dw 0 ; base low
	db 0 ; base mid 
	db 0b10011010 ; access
	db 0b00100000 ; granularity
	db 0 ; base high
.DATA64:
	dw 0 ; limit
	dw 0 ; base low
	db 0 ; base mid
	db 0b10010010 ; access
	db 0 ; granularity
	db 0 ; base high
.end:
